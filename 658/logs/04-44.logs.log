do run
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=201.56, duration=0.000243902206421
script duration name:co2_whiff_120_60_large seconds:202.0
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=2.19345092773e-05
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=5.10215759277e-05
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=0.000101089477539
executed snippet estimated_duration=0.0, duration=0.00269103050232
script duration name:co2 seconds:0.0
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.0001540184021
executed snippet estimated_duration=4.0, duration=0.00130391120911
Script duration 202.0
Run total estimated duration= 203.000
run duration: 0:03:23
doing event level: 2
19:58:44 -- Setting default integration. t=1.048576
setting integration time = 1.048576
SetIntegrationTime 1.048576 ===>> OK
----------------- start -----------------
**************** Experiment Type: Ar/Ar, Ar/Ar
create new session 4965161584
close session 4965161584
$$$$$ Clearing conditionals
adding conditionals kevin
extract conditionals from file. /Users/jan/PychronDev/scripts/conditionals/kevin.yaml
no attr for this modification cd={'extraction_str': '', 'attr': '', 'mapper': '', 'use_termination': False, 'start_count': 0, 'nskip': 0, 'window': 0, 'frequency': 1, 'teststr': '', 'action': 'Skip Next Run', 'ntrips': 1, 'use_truncation': False}
no attr for this cancelation cd={'mapper': '', 'window': 0, 'frequency': 1, 'attr': '', 'teststr': '', 'start_count': 0, 'ntrips': 1}
adding truncation attr="Ar40" test="Ar40>5000.0" start="10"
adding truncation attr="age" test="age>50.0" start="40"
adding truncation attr="Ar39" test="Ar39.bs_corrected<0.3" start="30"
adding truncation attr="Ar40" test="Ar40.bs_corrected>2000.0" start="20"
adding termination attr="Ar40" test="Ar40>5000.0" start="1"
Invalid conditional kind="pre_run_terminations"
no attr for this action cd={'mapper': '', 'attr': '', 'start_count': 0, 'window': 0, 'frequency': 1, 'teststr': '', 'action': None, 'ntrips': 1}
Invalid conditional kind="post_run_terminations"
Add queue conditionals
add default conditionals
adding default conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Start automated run 65804-44
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
%%%%%%%%%%%%%%%%%% setting automated run 65804-44
No value "sensitivity_multiplier" in metadata
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
============================= Pre Extraction Check =============================
loading queue conditionals pre_run_terminations
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
19:58:44 -- ******* Pre Extraction Check *******
Get a measurement from the spectrometer
Pre Extraction Termination data. keys=H2,H1,AX,L1,L2,CDD, signals=-0.05423,0.06170,0.00954,-0.00725,0.00291,0.00237
19:58:44 -- testing system defined conditionals
Checking default pre extraction terminations n=2
testing CDD
evaluate ot="CDD.inactive" t="CDD", ctx="{'CDD': False}"
GetDeflection CDD ===>> 50
testing CDD==2000
evaluate ot="CDD.deflection==2000" t="CDD==2000", ctx="{'CDD': 50.0}"
19:58:44 -- ******* Pre Extraction Check Passed *******
=================================================================================
19:58:44 -- stopping status monitor
stop 4942042608
Status monitor stopped
Status monitor finished
19:58:46 -- starting status monitor
start 4942042608
StatusMonitor period=1. Frequencies(state=2, checksum=3, lock=5, owner=5)
start extraction
do extraction
Analysis started at 19:58:47.995410
Extraction Started jan_co2.py
19:58:48 -- ******* Extraction Started jan_co2.py *******
state changed from not run to extraction
DO EXTRACTION <pychron.extraction_line.pyscript_runner.RemotePyScriptRunner object at 0x1295a4050>
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=4.6968460083e-05
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=9.29832458496e-05
executed snippet estimated_duration=100.0, duration=0.00194311141968
Jan CO2 laser analysis
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=4.10079956055e-05
Waiting for CO2 access
wait ('FelixCO2Flag', 0) {}
waiting for FelixCO2Flag = 0
Read FelixCO2Flag ===>> 0
finished waiting
CO2 free
wait ('CO2PumpTimeFlag', 0) {}
waiting for CO2PumpTimeFlag = 0
Read CO2PumpTimeFlag ===>> 0
finished waiting
acquire ('JanCO2Flag',) {'clear': True}
acquire JanCO2Flag
Set JanCO2Flag 1 ===>> OK
JanCO2Flag acquired
set extraction state False (0.75, 'red', 1.5)
CO2 acquired
executed snippet estimated_duration=0, duration=0.0177960395813
WaitForCO2Access.py completed successfully
gosub finished
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=0.000205993652344
Prepare for CO2 analysis
close () {'description': 'Jan Inlet'}
close name=--- desc=Jan Inlet
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
19:58:48 -- CLOSE  VALVE-R (Jan Inlet)
-------------------------- close None (Jan Inlet) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'description': 'Jan Ion Pump'}
open name=--- desc=Jan Ion Pump
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open O ===>> OK
GetIndicatorState O ===>> OK
change switch state (True, True)
update switch state O True args=() kw={} ncanvase=2
19:58:48 -- OPEN   VALVE-O (Jan Ion Pump)
-------------------------- open None (Jan Ion Pump) result=[(True, True)]
action=open, ok=True, locked=[False]
close () {'description': 'Microbone to Minibone'}
close name=--- desc=Microbone to Minibone
checking ownership. requestor=129.138.12.150
check software interlocks L
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close L ===>> OK
GetIndicatorState L ===>> False
change switch state (True, True)
update switch state L False args=() kw={} ncanvase=2
19:58:49 -- CLOSE  VALVE-L (Microbone to Minibone)
-------------------------- close None (Microbone to Minibone) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'description': 'Microbone to Turbo'}
open name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open U ===>> OK
GetIndicatorState U ===>> OK
change switch state (True, True)
update switch state U True args=() kw={} ncanvase=2
19:58:49 -- OPEN   VALVE-U (Microbone to Turbo)
-------------------------- open None (Microbone to Turbo) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Inlet Pipette'}
open name=--- desc=Microbone to Inlet Pipette
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open S ===>> OK
GetIndicatorState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=2
19:58:50 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
-------------------------- open None (Microbone to Inlet Pipette) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter D-50'}
open name=--- desc=Microbone to Getter D-50
checking ownership. requestor=129.138.12.150
check software interlocks K
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open K ===>> OK
GetIndicatorState K ===>> OK
change switch state (True, True)
update switch state K True args=() kw={} ncanvase=2
19:58:51 -- OPEN   VALVE-K (Microbone to Getter D-50)
-------------------------- open None (Microbone to Getter D-50) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter NP-10'}
open name=--- desc=Microbone to Getter NP-10
checking ownership. requestor=129.138.12.150
check software interlocks M
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open M ===>> OK
GetIndicatorState M ===>> OK
change switch state (True, True)
update switch state M True args=() kw={} ncanvase=2
19:58:51 -- OPEN   VALVE-M (Microbone to Getter NP-10)
-------------------------- open None (Microbone to Getter NP-10) result=[(True, True)]
action=open, ok=True, locked=[False]
close () {'description': 'CO2 Laser to Felix'}
close name=--- desc=CO2 Laser to Felix
checking ownership. requestor=129.138.12.150
check software interlocks F
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-F(CO2 Laser to Felix) software locked
change switch state (True, False)
-------------------------- close None (CO2 Laser to Felix) result=[(True, False)]
action=close, ok=True, locked=[True]
open () {'description': 'CO2 Laser to Jan'}
open name=--- desc=CO2 Laser to Jan
checking ownership. requestor=129.138.12.150
check software interlocks A
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open A ===>> OK
GetIndicatorState A ===>> OK
change switch state (True, True)
update switch state A True args=() kw={} ncanvase=2
19:58:52 -- OPEN   VALVE-A (CO2 Laser to Jan)
-------------------------- open None (CO2 Laser to Jan) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to CO2 Laser'}
open name=--- desc=Microbone to CO2 Laser
checking ownership. requestor=129.138.12.150
check software interlocks T
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open T ===>> OK
GetIndicatorState T ===>> OK
change switch state (True, True)
update switch state T True args=() kw={} ncanvase=2
19:58:52 -- OPEN   VALVE-T (Microbone to CO2 Laser)
-------------------------- open None (Microbone to CO2 Laser) result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=0, duration=4.97963285446
PrepareForCO2Analysis.py completed successfully
gosub finished
set_motor ('beam', '1.25') {}
setting motor "beam" to 1.25
set motor beam to 1.25
SetMotor beam,1.25 ===>> OK
GetMotorMoving beam ===>> False
GetMotorMoving beam ===>> False
Block completed
move_to_position ('125',) {'autocenter': True}
FusionsCO2 move to position 125
sending GoToHole 125,True
GoToHole 125,True ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> False
GetDriveMoving ===>> False
Block completed
GetAutoCorrecting ===>> OK
GetAutoCorrecting ===>> OK
GetAutoCorrecting ===>> OK
GetAutoCorrecting ===>> OK
GetAutoCorrecting ===>> OK
GetAutoCorrecting ===>> OK
GetAutoCorrecting ===>> OK
GetAutoCorrecting ===>> False
GetAutoCorrecting ===>> False
Block completed
update position
GetPosition ===>> -5.98170,-1.99390,1.00000
got position (-5.9817, -1.9939, 1.0)
move to position succeeded
sleep (5,) {}
SLEEP 5.0
block started
WaitControl setup for 5.0  
Join finished
block finished. duration 5.01922392845
close () {'description': 'Microbone to Turbo'}
close name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close U ===>> OK
GetIndicatorState U ===>> False
change switch state (True, True)
update switch state U False args=() kw={} ncanvase=2
19:59:06 -- CLOSE  VALVE-U (Microbone to Turbo)
-------------------------- close None (Microbone to Turbo) result=[(True, True)]
action=close, ok=True, locked=[False]
enable laser
enable () {}
set extraction state FusionsCO2 Enabled (False, 'red', 1.5)
enabling laser
Enable ===>> OK
begin interval
BEGIN INTERVAL Interval 1 waiting for 30.0
block started
WaitControl setup for 30.0  
set extract to 5.0
extract (5.0,) {}
GetPosition ===>> -5.98170,-1.99390,1.00000
set extraction state FusionsCO2 ON! 5.0(watts) (0.75, 'red', 1.5)
extract sample to 5.0 (watts)
set laser output
SetLaserOutput 5.0,watts ===>> OK
executing pattern triangle.lp
execute_pattern ('triangle.lp',) {}
executing pattern triangle.lp
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> False
Join finished
block finished. duration 30.0718197823
Interval 1 finished
IsPatterning ===>> False
Block completed
COMPLETE INTERVAL waiting for Interval 1 to complete
end_extract () {}
ending extraction. set laser power to 0
set laser power 0
SetLaserPower 0 ===>> OK
disable () {}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% disable
set extraction state False (0.75, 'red', 1.5)
disabling laser
Disable ===>> OK
sleep (30.0,) {}
SLEEP 30.0
block started
WaitControl setup for 30.0  
Join finished
block finished. duration 30.0966351032
executed snippet estimated_duration=165.0, duration=79.1161329746
jan_co2.py completed successfully
GetAchievedOutput ===>> No Response
Requested Output= 0.000
Achieved Output=  0.000
GetResponseBlob ===>> No Response
GetOutputBlob ===>> No Response
persistence save...
persistence save - db
AutomatedRunPersister post_extraction_save deprecated
persistence save - dvc
no extraction position for 125
not connected to db mysql://janexp@129.138.12.160/labspy
Enviromentals: {'lab_humiditys': [{'device': 'EnvironmentalMonitor',
                    'name': 'Lab Hum.',
                    'pub_date': '2017-08-15T19:56:29',
                    'title': 'iServer Hum.',
                    'value': 35.1}],
 'lab_pneumatics': [{'device': 'AirPressure',
                     'name': 'Pressure',
                     'pub_date': '2017-08-15T19:58:09',
                     'title': None,
                     'value': 109.65},
                    {'device': 'AirPressure2',
                     'name': 'Pressure2',
                     'pub_date': '2017-08-15T19:58:29',
                     'title': None,
                     'value': 114.93118}],
 'lab_temperatures': [{'device': 'EnvironmentalMonitor',
                       'name': 'Lab Temp.',
                       'pub_date': '2017-08-15T19:13:54',
                       'title': 'iServer Temp.',
                       'value': 73.2},
                      {'device': 'Chiller',
                       'name': 'Coolant Temp.',
                       'pub_date': '2017-08-15T19:32:49',
                       'title': None,
                       'value': 18.0}]}
Extraction Finished
20:00:09 -- ******* Extraction Finished *******
no overlap. not waiting for min ms pumptime
20:00:09 -- Sending spectrometer configuration
======== Sending configuration ========
SetDeflection CDD,50.0 ===>> OK
SetDeflection H2,0.0 ===>> OK
SetDeflection H1,0.0 ===>> OK
SetDeflection L2,825.0 ===>> OK
SetDeflection L1,400.0 ===>> OK
SetDeflection AX,190.0 ===>> OK
SetZFocus 74.64 ===>> OK
SetZSymmetry -50.72 ===>> OK
SetExtractionLens 26.13 ===>> OK
SetIonRepeller -3.81 ===>> OK
SetElectronEnergy 75.08 ===>> OK
SetYSymmetry -2.81 ===>> OK
SetIonCounterVoltage 1590.0 ===>> OK
send trap current 200.0
GetParameter Trap Current Readback ===>> 198.147042666178
SetParameter Trap Current Set,200.0 ===>> OK
updating mftable name mftable
Using mftable located at /Users/jan/PychronDev/setupfiles/spectrometer/mftables/mftable.csv
============ MFtable ===========
Isotope  H2     H1     AX     L1     L2     CDD    
Ar40     6.0554 5.8790 5.9928 6.1939 6.2302 6.6792
Ar39     6.0103 5.7700 6.0569 6.3371 6.1130 6.5657
Ar36     5.6878 5.4390 5.7203 5.9959 5.7679 6.2168
================================
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
======== Configuration Finished ========
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetParameter Trap Current Readback ===>> 198.035158395898
GetHighVoltage ===>> 4499.94659342336
start measurement
do measurement
L#=65804 analysis type=unknown
Measurement Started jan_co2_whiff_120_60_large.py
20:00:10 -- ******* Measurement Started jan_co2_whiff_120_60_large.py *******
state changed from extraction to measurement
setting trap, emission, spec, defl, and gains
GetExtractionLens ===>> 26.13
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetZFocus ===>> 74.64
GetDeflection H2 ===>> 0
GetDeflection H1 ===>> 0
GetDeflection AX ===>> 190
GetDeflection L1 ===>> 400
GetDeflection L2 ===>> 825
GetDeflection CDD ===>> 50
GetGain H2 ===>> 0.0113
GetGain H1 ===>> 0.1
GetGain AX ===>> 0.09645
GetGain L1 ===>> 0.010309
GetGain L2 ===>> 0.091218
GetGain CDD ===>> 0
GetParameter Trap Current Readback ===>> 198.035158395898
GetParameter Source Current Readback ===>> 551.80662882256
pre measurement save
New frame /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
testing...
no interpolation path defined
executed snippet estimated_duration=201.56, duration=0.00036883354187
co2 whiff measurement script
activate_detectors ('H2', 'H1', 'AX', 'L1', 'L2', 'CDD') {}
activate detectors
*************** Set Analysis View Ar/Ar
create graphs
clearing graphs
clear isotope group
setting isotope det=H2, iso=Ar41
setting isotope det=H1, iso=Ar40
setting isotope det=AX, iso=Ar39
setting isotope det=L1, iso=Ar38
setting isotope det=L2, iso=Ar37
setting isotope det=CDD, iso=Ar36
setting previous blanks
 - setting Ar41 blank 0.029+/-0.004
 - setting Ar40 blank 0.609+/-0.012
 - setting Ar36 blank 0.00469+/-0.00019
 - setting Ar37 blank 0.057+/-0.005
 - setting Ar38 blank 0.0100+/-0.0024
 - setting Ar39 blank 0.039+/-0.010
load analysis view
position_magnet ('Ar40',) {'detector': 'H1'}
detector Detector(H1)
POSITION Ar40 H1
setting detector H2 to Ar41 (40.9624)
setting detector H1 to Ar40 (39.9624)
setting detector AX to Ar39 (38.9624)
setting detector L1 to Ar38 (37.9624)
setting detector L2 to Ar37 (36.9624)
setting detector CDD to Ar36 (35.9624)
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [ -3.11428344e-04   1.33794662e-01   1.02959323e+00]
H1 map mass to dac 39.9624 >> 5.879
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4499.94659342336
positioning Ar40 (5.87896537912) on H1
setting magnet DAC
current  : 5.878966
requested: 5.878965
Delta Dac: 0.000000
Checking detector protection. dv=0.00000
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87896537912 ===>> OK
Magnet settling time: 0.500 0.500
Magnet settling complete
set_dac. change=True
close ('S',) {}
close name=S desc=---
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
update labels <pychron.experiment.plot_panel.PlotPanel object at 0x163b21b90>
update labels "<pychron.graph.stacked_regression_graph.StackedRegressionGraph object at 0x163b27e90>"
setting label 0 H2 Ar41
setting label 1 H1 Ar40
setting label 2 AX Ar39
setting label 3 L1 Ar38
setting label 4 L2 Ar37
setting label 5 CDD Ar36
update labels "<pychron.graph.stacked_graph.StackedGraph object at 0x163b278f0>"
setting label 0 H2 Ar41
setting label 1 H1 Ar40
setting label 2 AX Ar39
setting label 3 L1 Ar38
setting label 4 L2 Ar37
setting label 5 CDD Ar36
Close S ===>> OK
GetIndicatorState S ===>> False
change switch state (True, True)
update switch state S False args=() kw={} ncanvase=2
20:00:11 -- CLOSE  VALVE-S (Microbone to Inlet Pipette)
-------------------------- close S () result=[(True, True)]
action=close, ok=True, locked=[False]
equilibrate () {'do_post_equilibration': False, 'inlet': 'R', 'outlet': 'O', 'eqtime': 4}
Equilibration Started
20:00:12 -- ******* Equilibration Started *******
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close O ===>> OK
GetIndicatorState O ===>> False
change switch state (True, True)
update switch state O False args=() kw={} ncanvase=2
20:00:12 -- CLOSE  VALVE-O (Jan Ion Pump)
waiting 3s before opening inlet value ('R',)
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open R ===>> OK
GetIndicatorState R ===>> OK
change switch state (True, True)
update switch state R True args=() kw={} ncanvase=2
20:00:15 -- OPEN   VALVE-R (Jan Inlet)
set_time_zero (0,) {}
equilibrating for 4sec
sniff (4,) {}
py_sniff
build tables- sniff [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group /sniff/Ar41 (Group) '' table H2
add group /sniff/Ar40 (Group) '' table H1
add group /sniff/Ar39 (Group) '' table AX
add group /sniff/Ar38 (Group) '' table L1
add group /sniff/Ar37 (Group) '' table L2
add group /sniff/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
measuring sniff. ncounts=4
"sniff" increment series count="1" fit count="0" regressing="False"
starting measurement
Equilibration Finished
20:00:19 -- ******* Equilibration Finished *******
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
waiting for write to finish
measurement finished
estimated time: 4.194 actual time: :4.293
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
set_fits () {}
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal_linear.yaml
set "Ar41" to "('Average', 'SEM')"
set "Ar40" to "('Linear', 'SEM')"
set "Ar36" to "('Linear', 'SEM')"
set "Ar37" to "('linear', 'SEM')"
set "Ar38" to "('linear', 'SEM')"
set "Ar39" to "('Linear', 'SEM')"
set_baseline_fits () {}
Close R ===>> OK
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal_linear.yaml
set "H2" to "('average', 'SEM')"
set "H1" to "('average', 'SEM')"
set "CDD" to "('average', 'SEM')"
set "L2" to "('average', 'SEM')"
set "L1" to "('average', 'SEM')"
set "AX" to "('average', 'SEM')"
whiff () {'ncounts': 1, 'conditionals': [{'action': 'run_remainder', 'attr': 'Ar40', 'teststr': 'Ar40.cur<=175'}, {'action': 'run_pipette', 'attr': 'Ar40', 'teststr': 'Ar40.cur>500'}, {'action': 'run_chamber_split', 'attr': 'Ar40', 'teststr': 'Ar40.cur>=300'}, {'action': 'pump', 'attr': 'Ar40', 'teststr': 'Ar40.cur>175'}]}
build tables- whiff [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group /whiff/Ar41 (Group) '' table H2
add group /whiff/Ar40 (Group) '' table H1
add group /whiff/Ar39 (Group) '' table AX
set states for children of R. state=False
add group /whiff/Ar38 (Group) '' table L1
handle state [('R', False)]
add group /whiff/Ar37 (Group) '' table L2
update switch state R False args=() kw={'refresh': False} ncanvase=2
add group /whiff/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
measuring whiff. ncounts=1
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
20:00:20 -- CLOSE  VALVE-R (Jan Inlet)
refresh_canvas_needed fired
"whiff" increment series count="2" fit count="1" regressing="True"
starting measurement
testing Ar40<=175
evaluate ot="Ar40.cur<=175" t="Ar40<=175", ctx="{'Ar40': 57.012464069891202}"
condition Ar40<=175 is true trips=1/1
20:00:22 -- Conditional tripped: Ar40.cur<=175 condition Ar40<=175 is True
waiting for write to finish
measurement finished
estimated time: 1.049 actual time: :1.130
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
WHIFF Result=run_remainder
Whiff result=run_remainder
open ('R',) {}
open name=R desc=---
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open R ===>> OK
GetIndicatorState R ===>> OK
change switch state (True, True)
update switch state R True args=() kw={} ncanvase=2
20:00:22 -- OPEN   VALVE-R (Jan Inlet)
-------------------------- open R () result=[(True, True)]
action=open, ok=True, locked=[False]
open ('S',) {}
open name=S desc=---
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open S ===>> OK
GetIndicatorState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=2
20:00:23 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
-------------------------- open S () result=[(True, True)]
action=open, ok=True, locked=[False]
sleep (12.0,) {}
SLEEP 12.0
block started
WaitControl setup for 12.0  
Join finished
block finished. duration 12.0530390739
close ('R',) {}
close name=R desc=---
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close R ===>> OK
set states for children of R. state=False
handle state [('R', False)]
update switch state R False args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
20:00:36 -- CLOSE  VALVE-R (Jan Inlet)
-------------------------- close R () result=[(True, True)]
action=close, ok=True, locked=[False]
post_equilibration () {}
multicollect () {'integration_time': 1, 'ncounts': 120.0}
Post Equilibration Started jan_pump_extraction_line.py
20:00:36 -- ******* Post Equilibration Started jan_pump_extraction_line.py *******
build tables- signal [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
testing...
add group /signal/Ar41 (Group) '' table H2
no interpolation path defined
add group /signal/Ar40 (Group) '' table H1
add group /signal/Ar39 (Group) '' table AX
calculate duration
add group /signal/Ar38 (Group) '' table L1
testing...
add group /signal/Ar37 (Group) '' table L2
no interpolation path defined
add group /signal/Ar36 (Group) '' table CDD
executed snippet estimated_duration=4.0, duration=0.000179052352905
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
executed snippet estimated_duration=4.0, duration=0.00888609886169
measuring signal. ncounts=120.0
Pump after analysis
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000148057937622
Pump Microbone
close () {'description': 'Jan Inlet'}
close name=--- desc=Jan Inlet
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
"signal" increment series count="2" fit count="1" regressing="True"
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
20:00:37 -- CLOSE  VALVE-R (Jan Inlet)
-------------------------- close None (Jan Inlet) result=[(True, True)]
starting measurement
action=close, ok=True, locked=[False]
is_closed ('F',) {}
is F () closed?
is closed True
open () {'description': 'CO2 Laser to Jan'}
open name=--- desc=CO2 Laser to Jan
checking ownership. requestor=129.138.12.150
check software interlocks A
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open A ===>> OK
GetIndicatorState A ===>> OK
change switch state (True, True)
update switch state A True args=() kw={} ncanvase=2
testing Ar40>5000.0
20:00:38 -- OPEN   VALVE-A (CO2 Laser to Jan)
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 58.859068145139155}"
-------------------------- open None (CO2 Laser to Jan) result=[(True, True)]
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1568.5019246199365}"
close () {'description': 'CO2 Laser to Roughing'}
close name=--- desc=CO2 Laser to Roughing
checking ownership. requestor=129.138.12.150
check software interlocks G
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-G(CO2 Laser to Roughing) software locked
change switch state (True, False)
-------------------------- close None (CO2 Laser to Roughing) result=[(True, False)]
action=close, ok=True, locked=[True]
open () {'description': 'Microbone to Turbo'}
open name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open U ===>> OK
GetIndicatorState U ===>> OK
change switch state (True, True)
update switch state U True args=() kw={} ncanvase=2
20:00:39 -- OPEN   VALVE-U (Microbone to Turbo)
-------------------------- open None (Microbone to Turbo) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter NP-10'}
open name=--- desc=Microbone to Getter NP-10
checking ownership. requestor=129.138.12.150
check software interlocks M
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open M ===>> OK
GetIndicatorState M ===>> OK
change switch state (True, True)
update switch state M True args=() kw={} ncanvase=2
20:00:40 -- OPEN   VALVE-M (Microbone to Getter NP-10)
-------------------------- open None (Microbone to Getter NP-10) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter D-50'}
open name=--- desc=Microbone to Getter D-50
checking ownership. requestor=129.138.12.150
check software interlocks K
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1567.107425054102}"
Open K ===>> OK
GetIndicatorState K ===>> OK
change switch state (True, True)
update switch state K True args=() kw={} ncanvase=2
20:00:40 -- OPEN   VALVE-K (Microbone to Getter D-50)
-------------------------- open None (Microbone to Getter D-50) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to CO2 Laser'}
open name=--- desc=Microbone to CO2 Laser
checking ownership. requestor=129.138.12.150
check software interlocks T
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open T ===>> OK
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1573.189913928126}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08608896247306988}"
GetIndicatorState T ===>> OK
change switch state (True, True)
update switch state T True args=() kw={} ncanvase=2
20:00:41 -- OPEN   VALVE-T (Microbone to CO2 Laser)
-------------------------- open None (Microbone to CO2 Laser) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Inlet Pipette'}
open name=--- desc=Microbone to Inlet Pipette
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open S ===>> OK
GetIndicatorState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=2
20:00:42 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
-------------------------- open None (Microbone to Inlet Pipette) result=[(True, True)]
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1576.1428634752933}"
set_resource () {'name': 'CO2PumpTimeFlag', 'value': 30}
Set CO2PumpTimeFlag 30 ===>> OK
release ('JanCO2Flag',) {}
release JanCO2Flag
Set JanCO2Flag 0 ===>> OK
executed snippet estimated_duration=6.0, duration=6.92840695381
PumpMicrobone.py completed successfully
gosub finished
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
get resource value 0.0
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
executed snippet estimated_duration=4.0, duration=6.94105792046
jan_pump_extraction_line.py completed successfully
Post Equilibration Finished
20:00:43 -- ******* Post Equilibration Finished *******
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1578.0129222420917}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.0635210766177}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1576395123152}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.4495054914632}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08608896247306988}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0842300214495}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0842300214495}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0125578858085}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0125578858085}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.759570469061}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.759570469061}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.4843414423033}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.4843414423033}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.0811808455314}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.0811808455314}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08608896247306988}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1579.936213931501}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1579.936213931501}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.176886167735}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.176886167735}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.2500523072677}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.2500523072677}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.4782370361388}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.4782370361388}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.784801908712}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.784801908712}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08608896247306988}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0933152164762}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.702597988888}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0933152164762}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1969925071949}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.8062752796068}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1969925071949}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2892934391498}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.8985762115617}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2892934391498}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2749313112581}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.88421408367}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2749313112581}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1785331451715}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.7878159175834}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1785331451715}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08608896247306988}"
20:01:02 -- collecting point 25
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.3081627533559}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.9174455257678}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.3081627533559}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.3271543781545}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.9364371505665}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.3271543781545}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2360675862094}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.8453503586213}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2360675862094}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2749194378687}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.8842022102806}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2749194378687}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2215046516242}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.830787424036}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.2215046516242}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08608896247306988}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0543409347072}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.37223691332345}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.663623707119}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0543409347072}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0166676658396}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.356997008299217}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6259504382515}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0166676658396}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0451498069267}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.33636936374336}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6544325793386}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0451498069267}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0881029727184}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.317473283614262}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6973857451303}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0881029727184}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9832723984011}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.30728172479562}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.592555170813}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9832723984011}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08608896247306988}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9146048181356}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.304517751155473}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.5238875905475}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9146048181356}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9278770289595}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.31938286296714}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.5371598013714}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9278770289595}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.8943825043357}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.307870687259648}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.5036652767476}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.8943825043357}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9396278271283}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.286462920672992}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.5489105995402}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9396278271283}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9782053608885}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.264153139551546}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.5874881333004}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1580.9782053608885}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08608896247306988}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.013972377403}"
testing age>50.0
evaluate ot="age>50.0" t="age>50.0", ctx="{'age': 273.5510197520202}"
condition age>50.0 is true trips=1/1
20:01:19 -- Conditional tripped: age>50.0 condition age>50.0 is True
20:01:19 -- truncation conditional condition age>50.0 is True. measurement iteration executed 40/120 counts
state changed from measurement to truncated
waiting for write to finish
measurement finished
estimated time: 125.829 actual time: :42.237
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
baselines () {'settling_time': 15.0, 'detector': 'H1', 'mass': 34.2, 'ncounts': 60.0}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Baseline
build tables- baseline [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group baseline table H2
add group baseline table H1
add group baseline table AX
add group baseline table L1
add group baseline table L2
add group baseline table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
detector Detector(H1)
POSITION 34.2 H1
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [ -3.11428344e-04   1.33794662e-01   1.02959323e+00]
H1 map mass to dac 34.2 >> 5.24111160773
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4499.94659342336
positioning 34.2 (5.24108074331) on H1
setting magnet DAC
current  : 5.878965
requested: 5.241081
Delta Dac: 0.637885
Checking detector protection. dv=0.63788
Checking detector "CDD". Protection Threshold: 0.5 (V)
ProtectDetector CDD,On ===>> OK
GetDeflection CDD ===>> 2000
loading system conditionals pre_run_terminations
Protected = 2000
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals pre_run_terminations
loading system conditionals None
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals None
loading system conditionals post_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
SetMagnetDAC 5.24108074331 ===>> OK
loading queue conditionals post_run_terminations
Magnet settling time: 0.500 0.500
Show conditionals active run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x163df3a70>
Show conditionals measuring run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x163df3a70>
active_run same as measuring_run: True
Magnet settling complete
Wait for magnet to stop moving
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> False
Magnet move complete
Unprotect detectors
ProtectDetector CDD,Off ===>> OK
GetDeflection CDD ===>> 50
set_dac. change=True
Delaying 15.0s for detectors to settle
Join finished
measuring baseline. ncounts=60.0
"baseline" increment series count="2" fit count="1" regressing="True"
starting measurement
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.013972377403}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0911195020105}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1123760281441}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1263391067632}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': -0.026277766887150472}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1313576428927}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1255235071715}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.118109336992}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1060387947048}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.1005020336543}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': -0.0004406937781623206}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0976879110042}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0976879110042}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0889127690416}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0889127690416}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0834826456794}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0834826456794}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0778594897301}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0778594897301}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0763257242845}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0763257242845}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.02373561559141852}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0779063525463}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0779063525463}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0779665116804}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0779665116804}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0707907230853}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0707907230853}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0648776445125}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0648776445125}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0661999162005}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0661999162005}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.03386142367552745}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0626127871285}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6718955595404}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0626127871285}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0603522029448}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6696349753568}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0603522029448}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0623471775957}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6716299500076}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0623471775957}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.058838365486}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.668121137898}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.058838365486}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.055822287224}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6651050596358}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.055822287224}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.04423905265204536}"
20:02:03 -- collecting point 25
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0542198241446}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6635025965566}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0542198241446}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0517414062576}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6610241786695}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0517414062576}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0500871944291}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.659369966841}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0500871944291}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0475418255112}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.656824597923}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0475418255112}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0458047018092}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.655087474221}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0458047018092}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.05425663806688793}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0443829911194}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.250841061104}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6536657635313}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0443829911194}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0458649136156}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.249489529271898}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6551476860275}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0458649136156}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0467815638028}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.249992723215314}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6560643362147}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0467815638028}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0455292588426}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.248676840178913}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6548120312546}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0455292588426}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0426289839772}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.252228975095544}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6519117563892}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0426289839772}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.057432355898680905}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.041917885148}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.25098697898007}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.65120065756}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.041917885148}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.038177304625}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.25037692143977}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6474600770368}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.038177304625}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0369131450373}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.249159882411508}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6461959174492}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0369131450373}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0370895789517}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.250751228850817}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6463723513637}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0370895789517}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0371823662479}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 19.25242751494317}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 1581.6464651386598}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0371823662479}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.06287897362818648}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1581.0361777629169}"
testing age>50.0
evaluate ot="age>50.0" t="age>50.0", ctx="{'age': 273.488501059946}"
condition age>50.0 is true trips=1/1
20:02:19 -- Conditional tripped: age>50.0 condition age>50.0 is True
20:02:19 -- truncation conditional condition age>50.0 is True. measurement iteration executed 40/60 counts
waiting for write to finish
measurement finished
estimated time: 62.915 actual time: :42.100
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
activate_detectors ('H1', 'AX', 'CDD') {'peak_center': True}
peak_center () {'detector': 'H1', 'isotope': 'Ar40'}
peak center: mean=1552.72449573 threshold=5.0
peak center started
setup peak center. detector=['H1', 'AX', 'CDD'], isotope=Ar40
VersionedUnpickler [<apptools.sweet_pickle.versioned_unpickler.VersionedUnpickler object at 0x148455650>] using Updater [<apptools.sweet_pickle.updater.Updater object at 0x130d11d10>]
VersionedUnpickler [<apptools.sweet_pickle.versioned_unpickler.VersionedUnpickler object at 0x148455650>] using Updater [<apptools.sweet_pickle.updater.Updater object at 0x130d11d10>]
VersionedUnpickler [<apptools.sweet_pickle.versioned_unpickler.VersionedUnpickler object at 0x14e2335f0>] using Updater [<apptools.sweet_pickle.updater.Updater object at 0x130d11d10>]
setting integration time = 0.524288
SetIntegrationTime 0.524288 ===>> OK
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [ -3.11428344e-04   1.33794662e-01   1.02959323e+00]
H1 map mass to dac 39.9624 >> 5.879
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4499.94659342336
do peak center. <pychron.spectrometer.jobs.peak_center.PeakCenter object at 0x13162e230>
doing pc
starting peak center. center dac= 5.87896537912 step_width=0.001
width = 0.001
get scan parameters. half-width=0.015,window=0.015, i=0, scalar=1
Scan parameters center=5.87897 width=0.03000 (5.86397 - 5.89397)
Moving to starting dac 5.86396537912
setting magnet DAC
current  : 5.241081
requested: 5.863965
Delta Dac: 0.622885
Checking detector protection. dv=0.62288
Checking detector "CDD". Protection Threshold: 0.5 (V)
ProtectDetector CDD,On ===>> OK
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
GetDeflection CDD ===>> 2000
Protected = 2000
loading queue conditionals pre_run_terminations
loading system conditionals None
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals None
loading system conditionals post_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
SetMagnetDAC 5.86396537912 ===>> OK
loading queue conditionals post_run_terminations
Magnet settling time: 0.500 0.500
Show conditionals active run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x163df3a70>
Show conditionals measuring run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x163df3a70>
active_run same as measuring_run: True
Magnet settling complete
Wait for magnet to stop moving
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> False
Magnet move complete
Unprotect detectors
ProtectDetector CDD,Off ===>> OK
GetDeflection CDD ===>> 50
set_dac. change=True
Wait until signal near baseline. tol= 0.0965710198903. timeout= 10
Peak center failed to move to a baseline position
_do_sweep sm= 5.86396537912, em= 5.89396537912, stm= 0.001
calculated step values: start=5.86396537912, end=5.89396537912, width=0.001, nsteps=31.0
setting magnet DAC
current  : 5.863965
requested: 5.863965
Delta Dac: 0.000000
Checking detector protection. dv=0.00000
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86396537912 ===>> OK
set_dac. change=False
setting magnet DAC
current  : 5.863965
requested: 5.865000
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86499986188 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.865000
requested: 5.866034
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86603434464 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.866034
requested: 5.867069
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.8670688274 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.867069
requested: 5.868103
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86810331015 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.868103
requested: 5.869138
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86913779291 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.869138
requested: 5.870172
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87017227567 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.870172
requested: 5.871207
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87120675843 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.871207
requested: 5.872241
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87224124119 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.872241
requested: 5.873276
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87327572395 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.873276
requested: 5.874310
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87431020671 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.874310
requested: 5.875345
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87534468947 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.875345
requested: 5.876379
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87637917222 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.876379
requested: 5.877414
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87741365498 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.877414
requested: 5.878448
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87844813774 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.878448
requested: 5.879483
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.8794826205 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.879483
requested: 5.880517
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88051710326 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.880517
requested: 5.881552
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88155158602 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.881552
requested: 5.882586
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88258606878 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.882586
requested: 5.883621
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88362055153 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.883621
requested: 5.884655
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88465503429 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.884655
requested: 5.885690
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88568951705 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.885690
requested: 5.886724
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88672399981 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.886724
requested: 5.887758
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88775848257 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.887758
requested: 5.888793
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88879296533 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.888793
requested: 5.889827
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88982744809 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.889827
requested: 5.890862
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.89086193084 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.890862
requested: 5.891896
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.8918964136 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.891896
requested: 5.892931
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.89293089636 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.892931
requested: 5.893965
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.89396537912 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
result of _do_sweep=True
result of _calculate_peak_center=([5.8709693871363147, 5.8786647779178773, 5.88636016869944], [1101.8682673252194, 1497.1054336623802, 1105.1783674608027], 5.8780335153928274, 1497.1054336623802)
Failed to find a valid peak. No peak greater than 1.0. max = 0.0365881432606
new center pos Detector(H1) (Ar40) @ 5.87866477792
GetHighVoltage ===>> 4499.94659342336
GetDeflection H1 ===>> 0
dac uncorrected for HV and deflection 5.87869939703
update mftable H1 Ar40 5.87869939703 message=automated run peakcenter
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
dump mftable to /Users/jan/PychronDev/setupfiles/spectrometer/mftables/mftable.csv
add to repo msg=modified - automated run peakcenter
sweep finished
locally archiving mftable
setting magnet DAC
current  : 5.893965
requested: 5.878665
Delta Dac: 0.015301
Checking detector protection. dv=0.01530
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87866477792 ===>> OK
Magnet settling time: 0.500 0.500
Magnet settling complete
set_dac. change=True
setting integration time = 1.048576
SetIntegrationTime 1.048576 ===>> OK
Failed to find a valid peak. No peak greater than 1.0. max = 0.0365881432606
flush and close file /Users/jan/PychronDev/data/isotopes/6b/b28943-5efb-4c04-9c41-5a8a5aafbf7e.h5
finished measure script
executed snippet estimated_duration=213.56, duration=176.392282009
jan_co2_whiff_120_60_large.py completed successfully
Measurement Finished
20:03:06 -- ******* Measurement Finished *******
Post Measurement Started jan_pump_ms.py
20:03:06 -- ******* Post Measurement Started jan_pump_ms.py *******
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=2.8133392334e-05
Pumping spectrometer
open () {'name': 'O'}
open name=O desc=---
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open O ===>> OK
GetIndicatorState O ===>> OK
change switch state (True, True)
update switch state O True args=() kw={} ncanvase=2
20:03:06 -- OPEN   VALVE-O (Jan Ion Pump)
-------------------------- open O () result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=0, duration=0.343169927597
jan_pump_ms.py completed successfully
setting _ms_pumptime
Post Measurement Finished
20:03:07 -- ******* Post Measurement Finished *******
$$$$$$$$$$$$$$$$$$$$ state at run end truncated
post measurement save measured=True aborted=False
Set filtering
setting fod for Ar41= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for H2= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar40= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for H1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar36= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for CDD= {'filter_outliers': True, 'std_devs': 10, 'iterations': 1}
setting fod for Ar37= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L2= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar38= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar39= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for AX= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
not connected to db mysql://janexp@129.138.12.160/labspy
Enviromentals: {'lab_humiditys': [{'device': 'EnvironmentalMonitor',
                    'name': 'Lab Hum.',
                    'pub_date': '2017-08-15T19:56:29',
                    'title': 'iServer Hum.',
                    'value': 35.1}],
 'lab_pneumatics': [{'device': 'AirPressure',
                     'name': 'Pressure',
                     'pub_date': '2017-08-15T20:02:10',
                     'title': None,
                     'value': 114.525},
                    {'device': 'AirPressure2',
                     'name': 'Pressure2',
                     'pub_date': '2017-08-15T20:02:30',
                     'title': None,
                     'value': 116.49196}],
 'lab_temperatures': [{'device': 'EnvironmentalMonitor',
                       'name': 'Lab Temp.',
                       'pub_date': '2017-08-15T19:13:54',
                       'title': 'iServer Temp.',
                       'value': 73.2},
                      {'device': 'Chiller',
                       'name': 'Coolant Temp.',
                       'pub_date': '2017-08-15T19:32:49',
                       'title': None,
                       'value': 18.0}]}
persistence save...
persistence save - db
post measurement save
5498783120 connecting to database sqlite://@/
connected to db sqlite://@/
create new session 5498783120
close session 5498783120
No database instance. Not saving post measurement to isotopedb database
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
massspec enabled True
create new session 4981422800
MassSpec Database Version: 16.0
close session 4981422800
saving post measurement to secondary database
saving to massspec database 129.138.12.160/massspecdata
setting labnumber to 65804
setting aliquot to 44
setting step to 
setting uuid to 6bb28943-5efb-4c04-9c41-5a8a5aafbf7e
setting irradpos to 65804
setting extract_device to Fusions CO2
setting tray to 
setting position to 125
setting power_requested to 5.0
setting extract_value to 5.0
setting duration to 30.0
setting duration_at_request to 30.0
setting first_stage_delay to 30.0
setting cleanup to 30.0
setting comment to D:2
setting irradiation to NM-291
setting level to D
setting irradiation_level to D
setting sample to Og-15
setting material to Sanidine
setting project to IR1009
setting mass_spectrometer to Jan
no attribute chron_dosages
no attribute production_ratios
no attribute interference_corrections
no attribute production_name
no attribute j
Reference Isotope=Ar40
Reference Detector=H1
%%%%%%%%%%%%%%%%%%%% Comment: D:2 %%%%%%%%%%%%%%%%%%%
adding isotope Ar41 H2
add baseline dbdet= Ar41. original det= H2
get baseline data Ar41 H2
Get data baseline <pychron.processing.isotope.Baseline object at 0x1490072d0> len t=40
baseline Ar41. v=-0.0958294454273, e=0.00563943191161
get signal data Ar41 H2
Get data signal Ar41 0.127+/-0.010 len t=40
adding isotope Ar40 H1
add baseline dbdet= Ar40. original det= H1
get baseline data Ar40 H1
Get data baseline <pychron.processing.isotope.Baseline object at 0x149007490> len t=40
baseline Ar40. v=0.0671765802186, e=0.00813931856461
get signal data Ar40 H1
Get data signal Ar40 1581.64+/-0.22 len t=40
adding isotope Ar39 AX
add baseline dbdet= Ar39. original det= AX
get baseline data Ar39 AX
Get data baseline <pychron.processing.isotope.Baseline object at 0x149007650> len t=40
baseline Ar39. v=-0.0500585486169, e=0.0103885689367
get signal data Ar39 AX
Get data signal Ar39 19.14+/-0.05 len t=40
adding isotope Ar38 L1
add baseline dbdet= Ar38. original det= L1
get baseline data Ar38 L1
Get data baseline <pychron.processing.isotope.Baseline object at 0x149007810> len t=40
baseline Ar38. v=-0.0262208673872, e=0.00274405517591
get signal data Ar38 L1
Get data signal Ar38 0.343+/-0.017 len t=40
adding isotope Ar37 L2
add baseline dbdet= Ar37. original det= L2
get baseline data Ar37 L2
Get data baseline <pychron.processing.isotope.Baseline object at 0x1490079d0> len t=40
baseline Ar37. v=-0.0216819696593, e=0.00668065530744
get signal data Ar37 L2
Get data signal Ar37 0.098+/-0.028 len t=40
adding isotope Ar36 CDD
add baseline dbdet= Ar36. original det= CDD
get baseline data Ar36 CDD
Get data baseline <pychron.processing.isotope.Baseline object at 0x149007b90> len t=40
baseline Ar36. v=0.000318941981994, e=3.42382412349e-05
get signal data Ar36 CDD
Get data signal Ar36 0.0265+/-0.0014 len t=40
65804-44 added analysis time 0.561330080032s
analysis added to mass spec database
mass spec save time= 0.571
persistence save - dvc
================= post measurement started
create new session 4941776560
close session 4941776560
---------------- Experiment Queue saving disabled
DVC saving peakcenter
Failed to find a valid peak. No peak greater than 1.0. max = 0.0365881432606
Smart pull ahead: 0 behind: 0
Up-to-date with origin
add to repo msg=modified - ad8224ebc6dbfeb9f5997218dfa5fe690569839d.json
add to repo msg=modified - 04-44.json
add to repo msg=modified - 04-44.dat.json
add to repo msg=modified - 04-44.blan.json
add to repo msg=modified - 04-44.inte.json
add to repo msg=modified - 04-44.icfa.json
add to repo msg=modified - 04-44.base.json
not at valid file /Users/jan/PychronDev/data/.dvc/repositories/IR1009/658/tags/04-44.tags.json
add to repo msg=modified - 04-44.peak.json
add to repo msg=modified - 04-44.extr.json
not at valid file /Users/jan/PychronDev/data/.dvc/repositories/IR1009/658/monitor/04-44.moni.json
commit message=<COLLECTION>
add to repo msg=modified - 04-44.inte.json
add to repo msg=modified - 04-44.base.json
commit message=<ISOEVO> default collection fits
add to repo msg=modified - 04-44.blan.json
commit message=<BLANKS> preceding bc-02-J-875
add to repo msg=modified - 04-44.icfa.json
commit message=<ICFactor> default
push repository <pychron.git_archive.repo_manager.GitRepoManager object at 0x15deb5b90>
pushing to remote=origin, url=https://github.com
no changes to meta repo
create new session 4941776560
add association IR1009
get identifier "65804"
setting analysis irradiation position=<pychron.dvc.dvc_orm.IrradiationPositionTbl object at 0x140427190>
close session 4941776560
================= post measurement finished
20:03:21 -- ******* Post Run Check *******
loading queue conditionals post_run_actions
loading system conditionals post_run_actions
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals post_run_terminations
loading system conditionals post_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Checking default post run terminations n=1
GetDeflection CDD ===>> 50
testing CDD==2000
evaluate ot="CDD.deflection==2000" t="CDD==2000", ctx="{'CDD': 50.0}"
20:03:21 -- ******* Post Run Check Passed *******
20:03:21 -- Automated run 65804-44 truncated duration: 276.620 s
----------------- finish -----------------
----------------- stop -----------------
retroactive repository identifiers disabled
finish run. runs completed=3
write rem/ex queues
/Users/jan/PychronDev/experiments/rem/Load1819.rem.txt
/Users/jan/PychronDev/experiments/rem/Load1819.ex.txt
doing event level: 3
add run
